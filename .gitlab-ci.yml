# vim:set sw=2 ts=2 et:
stages:
  - install
  - build
  - test
  - deploy

# Base jobs for other jobs that need Python and Node dependencies to extend

.python:
  # Make sure the Python and Poetry versions here match the Dockerfile
  image: python:3.12
  variables:
    PYTHONUNBUFFERED: 1
  before_script:
    - . .venv/bin/activate
  needs:
    - poetry_install
  cache:
    key:
      files:
        - pyproject.toml
        - poetry.lock
    paths:
      - .venv
    policy: pull

.node:
  image: node:20
  needs:
    - npm_install
  cache:
    key:
      files:
        - package.json
        - package-lock.json
    paths:
      - node_modules
    policy: pull

# Dependency installation jobs

poetry_install:
  stage: install
  extends: .python
  before_script: []
  needs: []
  variables:
    POETRY_VERSION: 1.7.1
  script: >
    if [ ! -d "./.venv" ];
    then
      pip install "poetry==${POETRY_VERSION}"
      python -m venv --upgrade-deps .venv
      . .venv/bin/activate
      poetry install
    fi
  cache:
    policy: pull-push

npm_install:
  stage: install
  extends: .node
  needs: []
  script: >
    if [ ! -d "./node_modules" ];
    then
      npm ci
    fi
  cache:
    policy: pull-push

# Front-end jobs

static:
  stage: build
  extends: .node
  script:
    - npm run build:prod
  artifacts:
    name: static-$CI_JOB_ID
    paths:
      - ./node_modules
      - ./workshop/static_compiled
    expire_in: 30 mins

lint_js:
  stage: test
  extends: .node
  script:
    - npm run lint:js

lint_css:
  stage: test
  extends: .node
  script:
    - npm run lint:css

lint_format:
  stage: test
  extends: .node
  script:
    - npm run lint:format

test_js:
  stage: test
  extends: .node
  script:
    - npm run test:coverage

# Back-end jobs

black:
  stage: test
  extends: .python
  script:
    - black --check --diff ./

flake8:
  stage: test
  extends: .python
  script:
    - flake8 ./

isort:
  stage: test
  extends: .python
  script:
    - isort --check --diff ./

djhtml:
  stage: test
  extends: .python
  script:
    - find workshop/ -name '*.html' | xargs djhtml --check

test_python:
  stage: test
  extends: .python
  services:
    # Make sure this matches the Postgres version you run on your servers.
    - postgres:15
  needs:
    - poetry_install
    - static
  variables:
    DATABASE_URL: postgres://postgres@postgres/postgres
    DJANGO_SETTINGS_MODULE: workshop.settings.test
    ENABLE_DJANGO_DEFENDER: 'false'
    POSTGRES_HOST_AUTH_METHOD: trust
    RECAPTCHA_PRIVATE_KEY: 'dummy-key-value'
    RECAPTCHA_PUBLIC_KEY: 'dummy-key-value'
    SECRET_KEY: fake_secret_key_to_run_tests
  script:
    - coverage erase
    - apt-get update
    - apt-get install --yes git libpq-dev
    - python manage.py collectstatic --verbosity 0 --noinput --clear
    - python manage.py check
    - python manage.py makemigrations --check --noinput
    - coverage run manage.py test --parallel
    - coverage combine
    - coverage xml
    - coverage report
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: ./coverage.xml

# Deployment jobs

.heroku_deployment:
  image: curlimages/curl:latest
  stage: deploy
  script:
    - 'echo "Deploying to Heroku. To see progress, go to: https://dashboard.heroku.com/apps/$HEROKU_APP/activity"'
    - curl --fail-with-body -s -X POST -m 900 https://heroku-deploy.torchbox.com/$HEROKU_APP/$CI_COMMIT_SHA?key=$DEPLOYMENT_KEY

deploy_staging:
  extends: .heroku_deployment
  variables:
    HEROKU_APP: workshop-staging
  only:
    - staging
  environment:
    name: staging
    url: https://workshop-staging.torchbox.dev

deploy_production:
  extends: .heroku_deployment
  variables:
    HEROKU_APP: workshop-production
  only:
    - main
  when: manual
  environment:
    name: production
    url: https://workshop-production.torchbox.dev

# Gitlab Pages job (for project documentation)

pages:
  stage: deploy
  extends: .python
  only:
    refs:
      - main
    changes:
      - docs/**/*
  script:
    - mkdocs build
    - rm -rf public/
    - mkdir public
    - mv site/* public
  artifacts:
    paths:
      - public
